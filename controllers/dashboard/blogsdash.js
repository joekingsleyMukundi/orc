const Blog = require("../../models/dashmodel/blogs");
const BlogDashboard = require("../../models/dashmodel/blogsdashbard");
const Dashboard = require("../../models/dashmodel/dash");

exports.blogdashboard = async (req, res, next)=>{
    const user = req.session.user;
    const dashboard = await Dashboard.findOne({user:user._id});
    const blogsDashboard =  await BlogDashboard.findOne({user:user._id});
    console.log(blogsDashboard)
    const blogs = await Blog.find();
    const myBlogs = await Blog.find({user:user._id});
    res.render('dashboard-blog',{
        successmessage:req.flash('success'),
        errormessage:req.flash('error'),
        user,
        dashboard,
        blogsDashboard,
        blogs,
        myBlogs,
    })
}
exports.blogwritter = async (req, res, next)=>{
    const user = req.session.user;
    const dashboard = await Dashboard.findOne({user:user._id});
    const blogsDashboard =  await BlogDashboard.findOne({user:user._id});
    res.render('blogwriter',{
        successmessage:req.flash('success'),
        errormessage:req.flash('error'),
        user,
        dashboard,
        blogsDashboard,
    })
}

function countWords(content) {
    return content.split(/\s+/).filter(word => word).length;
}

function isAIGenerated(content) {
    const aiPhrases = ['generated by', 'openai', 'ai content', 'chatgpt'];
    return aiPhrases.some(phrase => content.toLowerCase().includes(phrase));
}

exports.createBlog = async (req, res, next) => {
    const { title, image, content } = req.body;
    const user = req.session.user;
    const dashboard = await Dashboard.findOne({user:user._id});
    const packageType = dashboard.package;
    console.log("i am")
    try {
        // Check if all fields are provided
        if ( title == ""|| image == "" || content == "") {
            req.flash('error', 'All fields are required.');
            return res.redirect('/blogs_dashboard');
        }
console.log ("mimi")

        // Validate image as a URL
        const urlRegex = /^(https?:\/\/)[^\s/$.?#].[^\s]*$/;
        if (!urlRegex.test(image)) {
            req.flash('error', 'Only image URLs are allowed.');
            return res.redirect('/blogs_dashboard');
        }

        // Calculate word count
        const wordCount = countWords(content);
        var revenue;
console.log("miminn")
        console.log(wordCount)
console.log(packageType)
        switch (packageType) {
        case "Basic":
            revenue = wordCount * 10;
return
        case "Platnum":
            revenue = wordCount * 100;
return
        case "Premium Ads":
            revenue = wordCount * 500;
return
        case "Premium":
            revenue = wordCount * 1000;
return   
default:
 revenue = wordCount * 1500;

// Default multiplier if no valid package type
    }

        // AI-generated content check
        if (isAIGenerated(content)) {
            req.flash('error', 'AI-generated content is not allowed.');
            return res.redirect('/blogs_dashboard');
        }

        // Create and save the new blog
        const newBlog = new Blog({
            title,
            image,
            content,
            wordCount,
            revenue: revenue,
            user: user._id,
        });

        await newBlog.save();
        const blogsDashboard =  await BlogDashboard.findOne({user:user._id});
        blogsDashboard.revenue += revenue;
        blogsDashboard.balance += revenue;
        await blogsDashboard.save();
        dashboard.appEarnings += revenue;
        dashboard.monthlyRevenue += revenue;
        dashboard.earningBalance += revenue;
        await dashboard.save();
        req.flash('success', 'Blog created successfully!');
        res.redirect('/blogs_dashboard');
    } catch (error) {
        console.error('Error creating blog:', error);
        req.flash('error', 'Error creating blog post.');
        res.redirect('/blogs_dashboard');
    }
};
